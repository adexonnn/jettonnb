# bot.py
import asyncio
import aiohttp
import logging
from aiogram import Dispatcher, types
from aiogram.client.bot import Bot, DefaultBotProperties
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from config import BOT_TOKEN, API_URL, ADMIN_ID
from database import conn, cursor, init_db

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

pending_configs = {}   # key: (user_id, slot), value: {'notif_type': str, 'threshold': float}
pending_setup = {}     # key: user_id, value: (slot, stage)
last_price = None

async def fetch_price():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL) as resp:
                data = await resp.json()
                price = float(data.get('pair', {}).get('priceUsd', 0))
                return price
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

async def price_monitor():
    global last_price
    while True:
        price = await fetch_price()
        if price is not None:
            cursor.execute("SELECT user_id, slot, threshold, notif_type FROM notifications")
            notifs = cursor.fetchall()
            change_text = ""
            if last_price is not None:
                change_percent = round(((price - last_price) / last_price) * 100, 2) if last_price != 0 else 0
                if abs(change_percent) > 0.01:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ > 0.01%
                    if change_percent > 0:
                        change_text = f"\n‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{change_percent}% üü¢\n"
                    elif change_percent < 0:
                        change_text = f"\n‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent}% üî¥\n"
            last_price = price

            for user_id, slot, threshold, notif_type in notifs:
                if notif_type == "none":
                    continue
                match notif_type:
                    case "–≤—ã—à–µ":
                        condition = price > threshold
                    case "—Ä–∞–≤–Ω–æ":
                        condition = abs(price - threshold) < 0.00001
                    case "–Ω–∏–∂–µ":
                        condition = price < threshold
                    case _:
                        condition = False
                if condition:
                    try:
                        msg = (
                            f"‚ùóÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—è—á–µ–π–∫–∞ {slot}): –¶–µ–Ω–∞ = {price}"
                        )
                        if change_text:
                            msg += f"{change_text}"
                        await bot.send_message(user_id, msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {user_id}: {e}")
                    cursor.execute(
                        "UPDATE notifications SET notif_type = 'none', threshold = 0 WHERE user_id = ? AND slot = ?",
                        (user_id, slot)
                    )
                    conn.commit()
        await asyncio.sleep(60)

async def ensure_user_notifications(user_id: int):
    cursor.execute("SELECT COUNT(*) FROM notifications WHERE user_id = ?", (user_id,))
    if cursor.fetchone()[0] < 3:
        for slot in range(1, 4):
            cursor.execute("INSERT OR IGNORE INTO notifications (user_id, slot) VALUES (?, ?)", (user_id, slot))
        conn.commit()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await ensure_user_notifications(message.from_user.id)
    info_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n"
        "–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞, –∏ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —ç—Ç–æ–π —Ü–µ–Ω—ã - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: <a href=\"https://t.me/yourusername\">@yourusername</a>\n\n"
        "‚ùóÔ∏è –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ - –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        "<a href=\"https://t.me/yourchannel\"><b>–ö–∞–Ω–∞–ª</b></a> | <a href=\"https://t.me/youychat\"><b>–ß–∞—Ç</b></a>"
    )
    await message.reply(info_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    
    cursor.execute("SELECT slot, threshold, notif_type FROM notifications WHERE user_id = ?", (message.from_user.id,))
    notifs = cursor.fetchall()
    kb = build_notif_keyboard(notifs)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)

def build_notif_keyboard(notifs):
    buttons = []
    for slot, threshold, notif_type in notifs:
        if notif_type == "none" and threshold == 0:
            text = f"–Ø—á–µ–π–∫–∞ {slot}: –ù–µ—Ç—É"
        else:
            type_display = f"({notif_type.capitalize()})"
            text = f"–Ø—á–µ–π–∫–∞ {slot}: {type_display} {threshold}"
        buttons.append([InlineKeyboardButton(text=text.strip(), callback_data=f"config_slot:{slot}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("notif"))
async def cmd_notif(message: types.Message):
    await ensure_user_notifications(message.from_user.id)
    cursor.execute("SELECT slot, threshold, notif_type FROM notifications WHERE user_id = ?", (message.from_user.id,))
    notifs = cursor.fetchall()
    kb = build_notif_keyboard(notifs)
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)

def build_config_keyboard(slot: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã—à–µ", callback_data=f"type:{slot}:–≤—ã—à–µ"),
         InlineKeyboardButton(text="–ù–∏–∂–µ", callback_data=f"type:{slot}:–Ω–∏–∂–µ"),
         InlineKeyboardButton(text="–†–∞–≤–Ω–æ", callback_data=f"type:{slot}:—Ä–∞–≤–Ω–æ")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{slot}")]
    ])

@dp.callback_query()
async def callback_handler(callback: CallbackQuery):
    data = callback.data
    user_id = callback.from_user.id
    if data.startswith("config_slot:"):
        slot = int(data.split(":")[1])
        pending_setup[user_id] = (slot, "awaiting_type")
        await callback.message.edit_text(
            f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—á–µ–π–∫–∏ {slot}:</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏–∂–µ:",
            reply_markup=build_config_keyboard(slot)
        )
        await callback.answer()
    elif data.startswith("type:"):
        _, slot, notif_type = data.split(":")
        slot = int(slot)
        pending_configs[(user_id, slot)] = pending_configs.get((user_id, slot), {})
        pending_configs[(user_id, slot)]["notif_type"] = notif_type
        pending_setup[user_id] = (slot, "awaiting_threshold")
        await callback.answer(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {notif_type}")
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    elif data.startswith("delete:"):
        _, slot = data.split(":")
        slot = int(slot)
        cursor.execute("UPDATE notifications SET notif_type = 'none', threshold = 0 WHERE user_id = ? AND slot = ?",
                       (user_id, slot))
        conn.commit()
        await callback.answer("–Ø—á–µ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        cursor.execute("SELECT slot, threshold, notif_type FROM notifications WHERE user_id = ?", (user_id,))
        notifs = cursor.fetchall()
        kb = build_notif_keyboard(notifs)
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)
    elif data.startswith("save_config:"):
        _, slot = data.split(":")
        slot = int(slot)
        conf = pending_configs.pop((user_id, slot), {})
        notif_type = conf.get("notif_type", "none")
        threshold = conf.get("threshold", 0)
        cursor.execute("UPDATE notifications SET notif_type = ?, threshold = ? WHERE user_id = ? AND slot = ?",
                       (notif_type, threshold, user_id, slot))
        conn.commit()
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        cursor.execute("SELECT slot, threshold, notif_type FROM notifications WHERE user_id = ?", (user_id,))
        notifs = cursor.fetchall()
        kb = build_notif_keyboard(notifs)
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=kb)
    else:
        await callback.answer()

@dp.message()
async def handle_config_input(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pending_setup:
        return
    slot, stage = pending_setup[user_id]
    text = message.text.strip().lower()
    if stage == "awaiting_type":
        if text not in {"–≤—ã—à–µ", "—Ä–∞–≤–Ω–æ", "–Ω–∏–∂–µ"}:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø. –í–≤–µ–¥–∏—Ç–µ: –≤—ã—à–µ, —Ä–∞–≤–Ω–æ –∏–ª–∏ –Ω–∏–∂–µ.")
            return
        pending_configs[(user_id, slot)] = pending_configs.get((user_id, slot), {})
        pending_configs[(user_id, slot)]["notif_type"] = text
        pending_setup[user_id] = (slot, "awaiting_threshold")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    elif stage == "awaiting_threshold":
        try:
            threshold = float(text)
        except ValueError:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return
        notif_type = pending_configs[(user_id, slot)]["notif_type"]
        current_price = await fetch_price()
        if current_price is not None:
            condition_met = False
            match notif_type:
                case "–≤—ã—à–µ":
                    condition_met = current_price > threshold
                case "—Ä–∞–≤–Ω–æ":
                    condition_met = abs(current_price - threshold) < 0.00001
                    if not condition_met and abs(current_price - threshold) > 0.1:
                        await message.reply(f"‚ùóÔ∏è –í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {current_price}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–ª–∏–∂–µ –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ.")
                        return
                case "–Ω–∏–∂–µ":
                    condition_met = current_price < threshold
            if condition_met:
                await message.reply(f"‚ùóÔ∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º: {current_price}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                pending_setup.pop(user_id)
                return
        pending_configs[(user_id, slot)]["threshold"] = threshold
        pending_setup.pop(user_id)
        await message.reply(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø: {pending_configs[(user_id, slot)]['notif_type']} –∏ –ø–æ—Ä–æ–≥: {threshold}.\n–ù–∞–∂–º–∏—Ç–µ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_config:{slot}")]
            ])
        )

async def start_bot():
    asyncio.create_task(price_monitor())
    await dp.start_polling(bot)